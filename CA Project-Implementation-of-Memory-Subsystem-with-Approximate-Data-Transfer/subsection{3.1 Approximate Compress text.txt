\subsection*{3.1 Approximate Compression Techniques}

Approximate compression techniques for bus architectures should have the following desiderata: (i) quality configurability, (ii) low compression/decompression latency and (iii) minimal hardware complexity and overheads. Towards this objective, we explore two different lightweight approximate compression techniques, viz., Approximate Base-Delta $(A x B+\Delta)$ Compression and Approximate Deduplication (AxDeduplication). In each scheme, an accuracy constraint specifies the maximum error that may be incurred in compressing each data element. Further, the compression is constrained such that $n$ data transactions on the bus are compressed to $m$ transactions, where $n$ and $m$ are integers and $n>m$. This greatly reduces the complexity of the compression/decompression logic since there is no need to split (and eventually reconstruct) bus transactions. In the following paragraphs, we describe the two techniques in detail and explain the rationale behind the choice of Approximate Deduplication as the compression scheme in AxBA.

![](https://cdn.mathpix.com/cropped/2023_11_21_3636d7c49e636de6f958g-3.jpg?height=404&width=858&top_left_y=1912&top_left_x=170)

Approximate Base-Delta Compression. Base-Delta $(\mathrm{B}+\Delta)$ [16], a lossless cache compression algorithm, exploits the low dynamic range of values in a data block to represent it with a common base and a series of deltas, i.e., the differences between values within the block and the base. Since the deltas require fewer bits than the original values, this representation inherently compresses the original block. Inspired by this approach, we propose $\mathrm{AxB}+\Delta$ where we subject the delta values to approximations. This is achieved by allowing an element to be represented by the maximum (minimum) delta value if it is within a certain accuracy bound from the maximum (minimum) delta value, thus extending the dynamic range of the scheme. Figure 3 shows an example 8-byte uncompressed data stream on the bus (equivalent to two bus words for a 32-bit data bus). The sequence consists of eight 1-byte signed integers. Let us assume that the maximum error magnitude that can be tolerated in compressing each data element is 4 . To reduce the complexity of compression logic, the proposed approximate compression technique chooses the first element as the common base and analyzes the remaining values to determine the deltas while satisfying the desired accuracy constraint. The number of bits required to represent the delta values ( 3 bits in this example with $\Delta_{\max }=3$ and $\Delta_{\min }=-2$ ) is precomputed based on the total uncompressed size of the data stream, the data bus size, and the size of the individual elements within the data stream. Using $\mathrm{AxB}+\Delta$, the seven remaining 1-byte elements (excluding the first base element) can be compressed into 3-bits each, with an additional byte for the base element. Thus, the entire data stream can be compressed to 4 bytes instead of the original 8 bytes, saving the transfer of a bus word, i.e., 4 bytes.

To decompress a compressed data transaction, $\mathrm{AxB}+\Delta$ adopts a similar approach to $\mathrm{B}+\Delta$, wherein the element values are obtained by simply adding the base value and the corresponding deltas.

Approximate Deduplication. Deduplication is a popular data compression technique that eliminates duplicate copies in repeating data.

Figure 3: Approximate base-delta compression scheme


It has been widely used in secondary storage systems [11]. We propose a simple deduplication-based compression scheme inspired by run-length coding that can be realized with minimal hardware complexity. We store sequences of identical data values as a single value and its count. A compressed representation thus consists of a base element (the first element) and a count of how many times that element appears consecutively. AxDeduplication extends this compression scheme by relaxing the exact match requirement imposed for the consecutive elements. In other words, a value is interpreted as a repeated instance of the base value as long as the two differ by less than a specified error bound. Figure 4 shows an example 8-byte uncompressed data stream containing eight 1-byte signed integers, to which the proposed scheme is applied with a maximum permissible error magnitude of 4 . The number of bits required to maintain the count is predetermined and is a function of the size of the elements in the data stream and the data bus width. In this example, the eight 1-byte elements can be compressed into a 1-byte base and a 3-byte count, resulting in a savings of 4 bytes. AxDeduplication can be further extended to store multiple repeating values along with their corresponding counts based on the bus width and the size of the underlying elements. For example, when compressing byte-sized scalar data transactions on a 4-byte wide bus, there are two other possible representations for a compressed transaction, viz., two base elements and their repeating counts, or three base elements and their counts. These representations capture the higher likelihood of different repeating patterns in a data stream, while trading-off the maximum count that can be stored for each repeating value. Our experiments suggest that allowing two base elements greatly improves the compression ratio, while the additional benefits for three or more base elements are greatly diminished. Therefore, we choose a compressed representation with two base elements. To decompress a compressed transaction, we use the respective counts and repeat the corresponding base elements.

Comparison of Compression Techniques. In order to determine the compression technique for AxBA, we developed a software implementation for the two proposed schemes and compared them with a previously proposed low-overhead Bi-directional Precision Scaling scheme (BPS) [17]. Figure 5 quantifies the potential for reduction in communication traffic by comparing the compression ratios achieved across a suite of machine learning benchmarks (benchmark details are provided in Section 4) while ensuring that the application quality is maintained within $0.5 \%$. We observe that AxDeduplication achieves much higher compression ratios compared to the other schemes. This is because in both BPS and $\mathrm{AxB}+\Delta$, each scalar element transmitted on the bus explicitly requires at least one bit for representation (either its truncated value or its delta from the

![](https://cdn.mathpix.com/cropped/2023_11_21_3636d7c49e636de6f958g-4.jpg?height=447&width=870&top_left_y=156&top_left_x=1083)

Figure 5: Comparison of compression techniques with $0.5 \%$ loss in application-level quality

base). Thus, the number of elements that can be represented depends linearly on the number of available bits in the compressed representation. However, AxDeduplication requires only one element to be represented explicitly, with the remainder being represented by a count. Therefore, in the limit, an exponential number of elements can be represented using the same number of bits, thereby offering higher opportunity for compression. Due to its potential for higher compression with minimal hardware complexity, we choose AxDeduplication as the compression scheme for AxBA. It is important to note, however, that the choice of approximate compression technique is not limited to those explored in this section; any low-latency, quality-aware compression technique can be implemented within the AxBA framework.